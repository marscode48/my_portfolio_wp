{"version":3,"names":[],"mappings":"","sources":["libs/slider-swiper.js"],"sourcesContent":["export class HeroSlider {\n  constructor(el, delay) {\n    this.DOM = {};\n    this.DOM.el = el;\n    this.delay = delay;\n    this.timer = null;\n    this.swiper = this._initSwiper();\n  }\n\n  _initSwiper() {\n    // アニメーション切り替え\n    const switchAnimation = () => {\n      clearTimeout(this.timer);\n      const activeSlide = document.querySelectorAll('.works-hero .swiper-slide[class*=-active]');\n      for (let i = 0; i < activeSlide.length; i += 1) {\n        activeSlide[i].classList.remove('anm-finished');\n        activeSlide[i].classList.add('anm-started');\n      }\n\n      this.timer = setTimeout(() => {\n        for (let i = 0; i < activeSlide.length; i += 1) {\n          activeSlide[i].classList.remove('anm-started');\n          activeSlide[i].classList.add('anm-finished');\n        }\n      }, this.delay - 1000);\n    };\n\n    // アニメーション終了（手動でスライド切替された時）\n    const finishAnimation = () => {\n      const activeSlide = document.querySelectorAll('.works-hero .swiper-slide.anm-started');\n      for (let i = 0; i < activeSlide.length; i += 1) {\n        activeSlide[i].classList.remove('anm-started');\n        activeSlide[i].classList.add('anm-finished');\n      }\n    };\n\n    return new Swiper(this.DOM.el, {\n      effect: 'fade',\n      fadeEffect: {\n        crossFade: true,\n      },\n      loop: true,\n      loopAdditionalSlides: 1,\n      speed: 2000,\n      followFinger: false,\n      grabCursor: true,\n      pagination: {\n        el: '.works-hero .swiper-pagination',\n        clickable: true,\n      },\n      on: {\n        slideChange(swiper) {\n          finishAnimation();\n        },\n        slideChangeTransitionStart() {\n          switchAnimation();\n        },\n      },\n    });\n  }\n\n  start(customOptions = {\n    delay: this.delay,\n    disableOnInteraction: false,\n    waitForTransition: false,\n  }) {\n    const options = {\n      delay: 4000,\n      disableOnInteraction: false,\n      ...customOptions,\n    };\n\n    this.swiper.params.autoplay = options;\n    this.swiper.autoplay.start();\n  }\n\n  stop() {\n    this.swiper.autoplay.stop();\n  }\n}\n\nexport class WorksSlider {\n  constructor(subEl, mainEl, delay) {\n    this.DOM = {};\n    this.DOM.subEl = subEl;\n    this.DOM.mainEl = mainEl;\n    this.swiperSub = this._initSwiperSub();\n    this.swiperMain = this._initSwiperMain();\n    this.delay = delay;\n  }\n\n  _initSwiperSub() {\n    return new Swiper(this.DOM.subEl, {\n      slidesPerView: 3,\n      spaceBetween: 12,\n      grabCursor: true,\n      scrollbar: {\n        el: '.works-page .swiper-scrollbar',\n        draggable: true,\n      },\n      breakpoints: {\n        600: {\n          slidesPerView: 5,\n        },\n      },\n    });\n  }\n\n  _initSwiperMain() {\n    // スライド番号取得\n    const mainSlide = document.querySelector(this.DOM.mainEl);\n    const slideLength = mainSlide.querySelectorAll('.swiper-slide').length;\n    const total = (`00${slideLength}`).slice(-2);\n    const fractionNum = mainSlide.querySelector('.swiper-fraction-num');\n    const fractionTotal = mainSlide.querySelector('.swiper-fraction-total');\n    fractionTotal.textContent = total;\n\n    // スライド番号の切り替え\n    const updateFraction = (index) => {\n      const current = (`00${index + 1}`).slice(-2);\n      fractionNum.classList.add('fraction-started');\n      setTimeout(() => {\n        fractionNum.textContent = current;\n      }, 400);\n    };\n\n    // スライド番号の削除\n    const finishFraction = () => {\n      fractionNum.classList.remove('fraction-started');\n    };\n\n    return new Swiper(this.DOM.mainEl, {\n      loop: true,\n      speed: 700,\n      grabCursor: true,\n      slidesPerView: 1,\n      centeredSlides: true,\n      effect: 'creative',\n      creativeEffect: {\n        limitProgress: 2,\n        prev: {\n          translate: ['-100%', 200, -1000],\n          rotate: [0, 0, 40],\n          shadow: true,\n        },\n        next: {\n          translate: ['100%', -200, -1000],\n          rotate: [0, 0, 40],\n          shadow: true,\n        },\n      },\n      navigation: {\n        nextEl: '.works-page .swiper-button-next',\n        prevEl: '.works-page .swiper-button-prev',\n      },\n      thumbs: {\n        swiper: this.swiperSub,\n      },\n      on: {\n        slideChange(swiper) {\n          updateFraction(swiper.realIndex);\n        },\n        slideChangeTransitionEnd() {\n          finishFraction();\n        },\n      },\n    });\n  }\n\n  start(options = { delay: this.delay }) {\n    options = {\n      delay: 4000,\n      disableOnInteraction: false,\n      ...options,\n    };\n\n    this.swiperMain.params.autoplay = options;\n    this.swiperMain.autoplay.start();\n  }\n\n  stop() {\n    this.swiperMain.autoplay.stop();\n  }\n}\n"],"file":"slider-swiper.js"}