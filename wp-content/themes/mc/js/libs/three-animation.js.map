{"version":3,"names":[],"mappings":"","sources":["libs/three-animation.js"],"sourcesContent":["import * as THREE from 'three';\n\nlet scene; let camera; let renderer; let earth; let mars;\n\nexport class ThreeAnimation {\n  constructor() {\n    this.DOM = {};\n    this.DOM.target = document.querySelector('#mainCanvas');\n    this.threeInit();\n  }\n\n  threeInit() {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    let rot = 0;\n\n    // レンダラーを作成\n    renderer = new THREE.WebGLRenderer({\n      canvas: this.DOM.target,\n    });\n    renderer.setSize(width, height);\n\n    // デバイスピクセル比は上限を2として扱う（canvas要素の解像度を下げる）\n    const devicePixelRatio = Math.min(2, window.devicePixelRatio);\n    renderer.setPixelRatio(devicePixelRatio);\n\n    // シーンを作成\n    scene = new THREE.Scene();\n\n    // カメラを作成\n    camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);\n    // カメラの初期座標を設定（X座標:0, Y座標:0, Z座標:0）\n    camera.position.set(0, 0, 1000);\n\n    // 球体作成\n    const earthGeometry = new THREE.SphereGeometry(300, 30, 30);\n    const marsGeometry = new THREE.SphereGeometry(300, 30, 30);\n\n    // マテリアルを作成\n    const earthMaterial = new THREE.MeshStandardMaterial({\n      map: new THREE.TextureLoader().load('../images/earthmap1k.jpg'),\n      side: THREE.DoubleSide,\n    });\n    const marsMaterial = new THREE.MeshStandardMaterial({\n      map: new THREE.TextureLoader().load('../images/marsmap1k.jpg'),\n      side: THREE.DoubleSide,\n    });\n    // 地球メッシュを作成\n    earth = new THREE.Mesh(earthGeometry, earthMaterial);\n    mars = new THREE.Mesh(marsGeometry, marsMaterial);\n    earth.position.x = 1200;\n    earth.position.y = 300;\n    earth.position.z = 300;\n\n    // 3D空間にメッシュを追加\n    scene.add(mars, earth);\n\n    // 平行光源\n    const directionalLight = new THREE.DirectionalLight(0xFFFFFF);\n    directionalLight.intensity = 5; // 光の強さを5倍に\n    directionalLight.position.set(1, 1, 1); // ライトの方向\n    // シーンに追加\n    scene.add(directionalLight);\n\n    // ポイント光源\n    const pointLight = new THREE.PointLight(0xffffff, 2, 1000);\n    scene.add(pointLight);\n\n    // 星屑追加\n    createStarField();\n\n    // 星屑作成\n    function createStarField() {\n      const SIZE = 2500; // 形状サイズ\n      const LENGTH = 100; // 配置する個数\n\n      // x,y,z座標の値がランダムに入った配列を100個作成\n      const vertices = [];\n      for (let i = 0; i < LENGTH; i += 1) {\n        const x = SIZE * (Math.random() - 0.5);\n        const y = SIZE * (Math.random() - 0.5);\n        const z = SIZE * (Math.random() - 0.5);\n\n        vertices.push(x, y, z);\n      }\n\n      // 形状データ作成\n      const starGeometry = new THREE.BufferGeometry();\n      // Floatの型付配列で効率化\n      starGeometry.setAttribute(\n        'position',\n        new THREE.Float32BufferAttribute(vertices, 3),\n      );\n\n      // マテリアル作成\n      const starMaterial = new THREE.PointsMaterial({\n        size: 10,\n        color: 0xffffff,\n      });\n\n      const stars = new THREE.Points(starGeometry, starMaterial);\n      scene.add(stars);\n    }\n\n    let frame = 0; // フレーム(fps)\n\n    // 初回実行\n    tick();\n\n    function tick() {\n      rot += 0.25; // 角度\n\n      const radian = (rot * Math.PI) / 180; // ラジアン変換\n\n      // 角度に応じてカメラの位置を変更\n      camera.position.x = 2000 * Math.sin(radian);\n      camera.position.z = 3000 * Math.cos(radian);\n\n      // 原点方向を見つめる\n      camera.lookAt(new THREE.Vector3(0, 0, -400));\n\n      // ライトを周回させる\n      pointLight.position.set(\n        500 * Math.sin(Date.now() / 500),\n        500 * Math.sin(Date.now() / 1000),\n        500 * Math.cos(Date.now() / 500),\n      );\n\n      // 球体は常に回転させておく\n      earth.rotation.y += 0.01;\n      mars.rotation.y += 0.01;\n\n      // レンダリング\n      requestAnimationFrame(tick);\n\n      // フレーム数をインクリメント\n      frame += 1;\n\n      // フレーム数が2で割り切れなければ描画しない(60fps → 30fps)\n      if (frame % 2 === 0) {\n        return;\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    // ウィンドウ変更時にサイズを維持する処理\n    function onWindowResize() {\n      // カメラのアスペクト比を正す\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n\n      // レンダラーのサイズを調整する\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    window.addEventListener('resize', onWindowResize);\n  }\n}\n"],"file":"three-animation.js"}