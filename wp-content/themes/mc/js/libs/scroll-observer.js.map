{"version":3,"names":[],"mappings":"","sources":["libs/scroll-observer.js"],"sourcesContent":["export class ScrollObserver {\n  constructor(els, cb, options) {\n    this.els = document.querySelectorAll(els);\n    const defaultOptions = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 0,\n      once: true,\n    };\n    this.cb = cb;\n    this.options = Object.assign(defaultOptions, options);\n    this.once = this.options.once;\n    this._init();\n  }\n\n  _init() {\n    const callback = function (entries, observer) {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          this.cb(entry.target, true);\n          if (this.once) {\n            observer.unobserve(entry.target);\n          }\n        } else {\n          this.cb(entry.target, false);\n        }\n      });\n    };\n\n    this.io = new IntersectionObserver(callback.bind(this), this.options);\n\n    // @see https://github.com/w3c/IntersectionObserver/tree/master/polyfill\n    this.io.POLL_INTERVAL = 100;\n\n    this.els.forEach((el) => this.io.observe(el));\n  }\n}\n"],"file":"scroll-observer.js"}