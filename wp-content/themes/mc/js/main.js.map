{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["import { MouseStalker } from 'mouse-stalker';\nimport { MenuOpen } from 'menu-open';\nimport { MainViasual } from 'main-visual';\nimport { ThreeAnimation } from 'three-animation';\nimport { HeroSlider } from 'slider-swiper';\nimport { SmoothScroll } from 'smooth-scroll';\nimport { ScrollObserver } from 'scroll-observer';\nimport { WorksAnimation } from 'works-animation';\nimport { TextAnimation, TweenTextAnimation } from 'text-animation';\nimport { SkillAnimation } from 'skill-animation';\nimport { AboutAnimation } from 'about-animation';\nimport { ContactCanvas } from 'contact-canvas';\nimport { ContactAnimation } from 'contact-animation';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  gsap.registerPlugin(ScrollTrigger);\n  gsap.registerPlugin(MotionPathPlugin);\n  const main = new Main();\n});\n\nclass Main {\n  constructor() {\n    this.header = document.querySelector('.header');\n    this.hero = new HeroSlider('.works-hero.swiper', '3000');\n    this.about = document.querySelector('.about');\n    this.contactCanvas = new ContactCanvas('.contact__canvas');\n    this.#init();\n  }\n\n  #init() {\n    new ThreeAnimation();\n    new MenuOpen();\n    new AboutAnimation(this.about); // 最初にpin-spacerを取得（SmoothScrollのズレ防止）\n    new SmoothScroll(0);\n    Pace.on('done', this.#scrollInit.bind(this));\n  }\n\n  #scrollInit() {\n    new ScrollObserver('.mouse-stalker', this.#mouseAnimation.bind(this));\n    new ScrollObserver('.nav-trigger', this.#navAnimation.bind(this), { once: false });\n    new ScrollObserver('.works-hero', this.#toggleHeroAnimation.bind(this), { once: false });\n    new ScrollObserver('.appear', this.#inviewAnimation);\n    new ScrollObserver('.tween-animate-title', this.#textAnimation, { rootMargin: '-50px 0px' });\n    new ScrollObserver('.mv', this.#mvAnimation);\n    new ScrollObserver('.works', this.#worksAnimation);\n    new ScrollObserver('.skill', this.#skillAnimation);\n    new ScrollObserver('.contact', this.#toggleContactCanvas.bind(this), { once: false });\n    new ScrollObserver('.contact', this.#contactAnimation);\n  }\n\n  #mouseAnimation(el, inview) {\n    if (inview) {\n      new MouseStalker();\n    }\n  }\n\n  #textAnimation(el, inview) {\n    if (inview) {\n      const ta = new TweenTextAnimation(el);\n      ta.animate();\n    }\n  }\n\n  #toggleHeroAnimation(el, inview) {\n    if (inview) {\n      this.hero.start();\n      console.log('hero start is called');\n    } else {\n      this.hero.stop();\n      console.log('hero stop is called');\n    }\n  }\n\n  #mvAnimation(el, inview) {\n    if (inview) {\n      new MainViasual(el);\n    }\n  }\n\n  #worksAnimation(el, inview) {\n    if (inview) {\n      new WorksAnimation(el);\n    }\n  }\n\n  #skillAnimation(el, inview) {\n    if (inview) {\n      new SkillAnimation(el);\n    }\n  }\n\n  #toggleContactCanvas(el, inview) {\n    if (inview) {\n      this.contactCanvas.start();\n      console.log('contact start is called');\n    } else {\n      this.contactCanvas.stop();\n      console.log('contact stop is called');\n    }\n  }\n\n  #contactAnimation(el, inview) {\n    if (inview) {\n      new ContactAnimation(el);\n    }\n  }\n\n  #navAnimation(el, inview) {\n    if (inview) {\n      this.header.classList.remove('triggered');\n    } else {\n      this.header.classList.add('triggered');\n    }\n  }\n\n  #inviewAnimation(el, inview) {\n    if (inview) {\n      el.classList.add('inview');\n    }\n  }\n}\n"],"file":"main.js"}